#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define ld long double
#define ar array

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp> 
using namespace __gnu_pbds;

template <typename T> using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;

#define vt vector
#define pb push_back
#define all(c) (c).begin(), (c).end()
#define sz(x) (int)(x).size()
#define pll pair<ll, ll>
#define pii pair<int, int>
#define f first
#define s second

#define F_OR(i, a, b, s) for (int i=(a); (s)>0?i<(b):i>(b); i+=(s))
#define F_OR1(e) F_OR(i, 0, e, 1)
#define F_OR2(i, e) F_OR(i, 0, e, 1)
#define F_OR3(i, b, e) F_OR(i, b, e, 1)
#define F_OR4(i, b, e, s) F_OR(i, b, e, s)
#define GET5(a, b, c, d, e, ...) e
#define F_ORC(...) GET5(__VA_ARGS__, F_OR4, F_OR3, F_OR2, F_OR1)
#define FOR(...) F_ORC(__VA_ARGS__)(__VA_ARGS__)
#define EACH(x, a) for (auto& x: a)

template<class T> bool umin(T& a, const T& b) {
	return b<a?a=b, 1:0;
}
template<class T> bool umax(T& a, const T& b) { 
	return a<b?a=b, 1:0;
} 

ll FIRSTTRUE(function<bool(ll)> f, ll lb, ll rb) {
	while(lb<rb) {
		ll mb=(lb+rb)/2;
		f(mb)?rb=mb:lb=mb+1; 
	} 
	return lb;
}
ll LASTTRUE(function<bool(ll)> f, ll lb, ll rb) {
	while(lb<rb) {
		ll mb=(lb+rb+1)/2;
		f(mb)?lb=mb:rb=mb-1; 
	} 
	return lb;
}

template<class A> void read(vt<A>& v);
template<class A, size_t S> void read(ar<A, S>& a);
template<class A, class B> void read(pair<A, B>& x);
template<class T> void read(T& x) {
	cin >> x;
}
void read(double& d) {
	string t;
	read(t);
	d=stod(t);
}
void read(long double& d) {
	string t;
	read(t);
	d=stold(t);
}
template<class H, class... T> void read(H& h, T&... t) {
	read(h);
	read(t...);
}
template<class A> void read(vt<A>& x) {
	EACH(a, x)
		read(a);
}
template<class A, size_t S> void read(array<A, S>& x) {
	EACH(a, x)
		read(a);
}
template<class A, class B> void read(pair<A, B>& x) {
	cin >> x.first >> x.second;
}


string to_string(char c) {
	return string(1, c);
}
string to_string(bool b) {
	return b?"true":"false";
}
string to_string(const char* s) {
	return string(s);
}
string to_string(string s) {
	return s;
}
string to_string(vt<bool> v) {
	string res;
	FOR(sz(v))
		res+=char('0'+v[i]);
	return res;
}

template<size_t S> string to_string(bitset<S> b) {
	string res;
	FOR(S)
		res+=char('0'+b[i]);
	return res;
}
template<class T> string to_string(T v) {
    bool f=1;
    string res;
    EACH(x, v) {
		if(!f)
			res+=' ';
		f=0;
		res+=to_string(x);
	}
    return res;
}
template<class A, class B> string to_string(pair<A, B>& x) {
	return to_string(x.first) + ' ' + to_string(x.second);
}

template<class A> void write(A x) {
	cout << to_string(x);
}
template<class H, class... T> void write(const H& h, const T&... t) { 
	write(h);
	write(t...);
}
void print() {
	write("\n");
}
template<class H, class... T> void print(const H& h, const T&... t) { 
	write(h);
	if(sizeof...(t))
		write(' ');
	print(t...);
}

#define MOD 1000003

ll fac[16], facm[16];

void init() {
	fac[0]=1;
	FOR(i, 1, 16) fac[i]=fac[i-1]*i%MOD;
	facm[15]=156595;
	FOR(i, 15, 0, -1) facm[i-1]=facm[i]*i%MOD;
}

int solve(vt<string> v, int k) {
	int n=sz(v), m=sz(v[0]);
	auto check=[&](int b) {
		string p(m, '?');
		FOR(n) {
			if (b&(1<<i)) {
				FOR(j, m) {
					if (v[i][j]=='?') continue;
					if (p[j]=='?') p[j]=v[i][j];
					else if (p[j]!=v[i][j]) return 0ll;
				}
			}
		}
		ll ret=1;
		FOR(m) if (p[i]=='?') ret*=26, ret%=MOD;
		return ret;
	};
	int ans=0;
	FOR(1<<n) {
		int c=__builtin_popcount(i);
		if (c<k) continue;
		ll d=check(i);
		d*=fac[c], d%=MOD;
		d*=facm[k], d%=MOD;
		d*=facm[c-k], d%=MOD;
		if ((c-k)&1) d=MOD-d;
		ans+=d, ans%=MOD;
	}
	return ans;
}

vt<vt<string>> patterns = {
    {"?"},
    {"a", "b", "c"},
    {"a?", "?b"},
    {"?????"},
    {"?", "?"},
    {"??", "ab"},
    {"a??", "?a?", "??a"},
    {
        "??????????????????????????????????????????????????",
        "??????????????????????????????????????????????????",
        "??????????????????????????????????????????????????",
        "??????????????????????????????????????????????????",
        "??????????????????????????????????????????????????",
        "??????????????????????????????????????????????????",
        "??????????????????????????????????????????????????",
        "??????????????????????????????????????????????????",
        "??????????????????????????????????????????????????",
        "??????????????????????????????????????????????????",
        "??????????????????????????????????????????????????",
        "??????????????????????????????????????????????????",
        "??????????????????????????????????????????????????",
        "??????????????????????????????????????????????????",
        "??????????????????????????????????????????????????"
    },
    {
        "a?????????????????????????????????????????????????",
        "b?????????????????????????????????????????????????",
        "c?????????????????????????????????????????????????",
        "d?????????????????????????????????????????????????",
        "e?????????????????????????????????????????????????",
        "f?????????????????????????????????????????????????",
        "g?????????????????????????????????????????????????",
        "h?????????????????????????????????????????????????",
        "i?????????????????????????????????????????????????",
        "j?????????????????????????????????????????????????",
        "k?????????????????????????????????????????????????",
        "l?????????????????????????????????????????????????",
        "m?????????????????????????????????????????????????",
        "n?????????????????????????????????????????????????",
        "o?????????????????????????????????????????????????"
    },
    {
        "a?????????????????????????????????????????????????",
        "?b????????????????????????????????????????????????",
        "??c???????????????????????????????????????????????",
        "???d??????????????????????????????????????????????",
        "????e?????????????????????????????????????????????",
        "?????f????????????????????????????????????????????",
        "??????g???????????????????????????????????????????",
        "???????h??????????????????????????????????????????",
        "????????i?????????????????????????????????????????",
        "?????????j????????????????????????????????????????",
        "??????????k???????????????????????????????????????",
        "???????????l??????????????????????????????????????",
        "????????????m?????????????????????????????????????",
        "?????????????n????????????????????????????????????",
        "??????????????o???????????????????????????????????"
    },
    {"ek??cz???d?svhm???z?l????o??ooh????x?x?ooz?r",
     "pfae??adb?g??dy?mmb?ke?wl?pyt??qhlaqobnp????",
     "???cy??f???h?m?n???t??z???f?o?ezbwqapty??gu?",
     "??i????ul?k????jk?erx??v?j??e?i?x???p?ua??kc",
     "v???b?t??ngxy??ogeus?y??o?????wg?u?eqpl??ij?",
     "mr?uap???k?j?kag?vm?rlser???ysv???h?ldx?psud",
     "q??pm?c??yhtd?n?u??o?yq??d??y??v?u??ij???hzt",
     "???zp??xh?????uzp?n???zj????p?h?q?mc????pc??",
     "??jc???ij??t?w???o?utja???yi??l???o??zy??j??"},
    {"?????????????", "?y???????????", "w????????z???", "??????s????b?",
     "h????e??????s", "?????????????", "x???a????????",
     "?????????v???", "????h???????r"},
    {"x?????pebf?xay?d?jk??m?o?????cn??x?f?g?p?",
     "??fuzru?e??k????ne?i??r?qk?sg?hs?t??z?l?s",
     "?wquxuynhdy??m?j?c?h?ui???dce?i?wn?c??zmv",
     "m??fewo?j?j?s?????veoc??qd?yll?br?h?y????",
     "kp?ny??k?ork?xky?r?e?nik??w???uz??godh???",
     "??tl?b?g?es?tmya?s?i????qgt?o??t??b?niz?i",
     "??qm?ysee???g?z??xo?c????lmjq?rcwmpxep?m?"},
    {"??g???????????????????g??????????",
     "?????????????????????????????????",
     "??r??????????????????l????xy?????",
     "????????????????????????????u?v??",
     "???????????????????????ax?l?????a",
     "??????????????l???????po?????????",
     "?????????????nwc????????????????e"}
};

vt<int> lengths = {
    1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 6, 4, 2, 1, 3
};

vt<int> expected_results = {
    26, 3, 1, 881343, 0, 675, 75, 0, 61146, 993142, 358080, 0, 463824, 0, 844724
};

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	init();
	FOR(4) {
		//print(solve(patterns[i], lengths[i]));
		assert(solve(patterns[i], lengths[i])==expected_results[i]);
	}
}